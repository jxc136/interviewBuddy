{
  "questions": [
    "Tell me about yourself",
    "How did you discover programming?",
    "Why do you want a career in programming?",
    "What is it about programming that inspired you to start a career as a developer?",
    "If you weren't a coder, what would you be?",
    "What's your favourite thing about coding?",
    "Where do you want to be in five years?",
    "What makes you different from other Makers graduates?",
    "What shows us you're going to keep on learning to become an experience software developer?",
    "What's a technology trend you are excited about?",
    "Where is technology heading in the next five years in your opinion?",
    "Tell me something interesting you've recently learned in a blog, article or book you've read.",
    "Tell me something cool you found out about coding recently.",
    "What IDE do you use?",
    "Who do you look up to in the coding world? (Favourite blog, Hacker News, Twitter etc.)",
    "What new languages or frameworks interest you?",
    "What languages are you most excited about now?",
    "What’s your coding set up?",
    "Tell me about an open source project you have contributed to or used.",
    "What do you think about the move towards everything being in Javascript?",
    "What is your favourite programming language?",
    "Do you consider yourself a front-end or back-end developer? Why? Should there be a difference?",
    "Do you think there should be front-end and back-end developers, or should everyone be full-stack?",
    "You say on your CV that you like using [any tech listed] What's your favourite thing about [aforementioned tech]?",
    "What do you like/dislike about Ruby/JS etc.?",
    "Tell me about a project that's failed",
    "Tell me about a project that's really excited you",
    "Explain more precisely a functionality you worked on in that project.",
    "Draw out a system that you’ve worked on most recently or you’ve enjoyed doing",
    "Sketch out the architechture of a recent project and talk me through the decisions you made buidling it.",
    "In a team project, how did your team prioritise what to do?",
    "How do you deal with deadlines?",
    "What's your plan for managing your own learning on the job?",
    "Tell me about a significant challenge you've overcome",
    "Have you ever experienced conflict during a team project? How did you solve it?",
    "What would you bring to our working culture?",
    "Describe a situation in which you felt you had not communicated well enough. What did you do? How did you handle it?",
    "Tell me about something you're really proud of achieving",
    "Tell me about something that is challenging to you personally that you are working to overcome?",
    "How has your previous experience helped you become a better developer?",
    "What would you like to be doing in three years time?",
    "Tell me about a learning process you've used at Makers that you've found helpful.",
    "Why do you care about creating quality software, rather than just software that works?",
    "Explain agile in 30 seconds",
    "Explain how you work with Scrum and Kanban in an Agile environment.",
    "What do you value when writing code?",
    "Where do you put most of your focus when reviewing somebody else’s code?",
    "What really bugs you in a code review?",
    "Why do we use TDD? Should we always TDD?",
    "Which tools have you used for testing your code quality?",
    "How can you debug a program while it’s being used?",
    "How do you ensure your program runs smoothly and fast?",
    "How can you ensure changes in code will not affect any other parts of the product?",
    "What do you love about testing?",
    "What kind of challenges does testing present? Can you tell me about some specific software testing challenges you’ve faced, and how you overcame them?",
    "How do you prioritize your testing? What factors might influence your decisions?",
    "What are the benefits of pairing? Is pairing always a good thing?",
    "Why are “hackers” or “hacky code” looked down upon? Doesn’t it mean you write quicker code?",
    "What are Kent Beck’s design principles?",
    "What are the Software Craftsmanship principles and what do they mean to you?",
    "How do you write quality software?",
    "What is Kanban?",
    "What is the purpose of a retrospective? Why would you run a morning standup?",
    "How do you document your code? How much do you do this?",
    "What do you find hardest about programming?",
    "Which code repository do you use and why?",
    "Describe your workflow",
    "How often do you refactor your code?",
    "Why do we bother following DRY? Isn’t it easier just to copy and paste?",
    "What’s the point in writing clear git commit messages?",
    "Which SOLID principle do you think is the most important in coding?",
    "What are XP Values?",
    "Are you familiar with design patterns? What design pattern have you used and in what situations?",
    "How do you prioritize program requirements? Mention any different techniques you know.",
    "Describe the process of writing a piece of code from requirements to delivery.",
    "Describe a time when you managed to reduce the user’s perception of waiting. What features did you use?",
    "What do you understand by estimation? (e.g. planning poker, T-shirt sizing) How would you work out how long something would take?",
    "Why are cache invalidation and naming things considered the hardest things in programming?",
    "What is inversion control/dependency injection?",
    "How does garbage collection work?",
    "How is a hash map implemented?",
    "What do you understand about usability principles? (for front end jobs)",
    "What is the difference between a linked list and an array list?",
    "Name a design pattern; how would you use it?",
    "What does the Single Responsibility Principle mean?",
    "What is encapsulation?",
    "Why would you program using TDD? What are the drawbacks?",
    "What do we mean by DRY?",
    "What is MVC and why would we use it?",
    "Describe classical vs. prototypical inheritance",
    "What's the advantage of a no-sql database?",
    "How would you deploy code to production?",
    "What is a recent technical challenge you experienced and how did you solve it?",
    "How do you debug?",
    "What’s your process for using/learning about gems?",
    "How would you go about getting up to speed at our company?",
    "How would you build an API? What language would you use?",
    "Why do companies increasingly move towards using micro services?",
    "Have you ever used a grid system, and if so, what do you prefer?",
    "What is CRUD?",
    "What is the advantage in designing a RESTful API?",
    "What are the benefits of a SQL database over other types of data-stores?",
    "What’s the longest you’ve struggled on a problem?",
    "What do you think about web sockets?",
    "What does array inject do?",
    "What’s wrong with the error message 'undefined is not a function?'",
    "What do we mean when we say Ruby is a human-readable language?",
    "What is the Principle of Least Astonishment?",
    "What’s the difference between node and JavaScript?",
    "When should you raise exceptions?",
    "What do we mean by prototypical inheritance?",
    "How would you optimize a system that is running slow?",
    "How would you identify bottlenecks in your system?",
    "What is an 'n plus 1' problem?",
    "What are OOP principles?",
    "What is Inheritance?",
    "What is Polymorphism?",
    "What is Encapsulation?",
    "What is Abstraction?"
  ]
}